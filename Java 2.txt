import java.math.BigInteger;
import java.security.SecureRandom;

public class RSA {

  private final static BigInteger one = new BigInteger("1");
  private final static SecureRandom random = new SecureRandom();

  private BigInteger privateKey;
  private BigInteger publicKey;
  private BigInteger modulus;

  // Generate an N-bit (roughly) public and private key
  public RSA(int N) {
    BigInteger p = BigInteger.probablePrime(N/2, random);
    BigInteger q = BigInteger.probablePrime(N/2, random);
    BigInteger phi = (p.subtract(one)).multiply(q.subtract(one));

    modulus = p.multiply(q);
    publicKey = new BigInteger("65537");     // common value in practice = 2^16 + 1
    privateKey = publicKey.modInverse(phi);
  }

  public BigInteger encrypt(BigInteger message) {
    return message.modPow(publicKey, modulus);
  }

  public BigInteger decrypt(BigInteger encrypted) {
    return encrypted.modPow(privateKey, modulus);
  }

  public static void main(String[] args) {
    int N = 512;  // set up keys
    RSA rsa = new RSA(N);
    System.out.println("Public key: " + rsa.publicKey);
    System.out.println("Private key: " + rsa.privateKey);

    // encrypt and decrypt a message
    BigInteger message = new BigInteger(N-1, random);

    BigInteger encrypt = rsa.encrypt(message);
    BigInteger decrypt = rsa.decrypt(encrypt);

    System.out.println("Original message: " + message);
    System.out.println("Encrypted message: " + encrypt);
    System.out.println("Decrypted message: " + decrypt);
  }
}

